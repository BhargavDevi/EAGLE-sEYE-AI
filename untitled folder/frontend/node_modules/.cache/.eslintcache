[{"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/index.js":"1","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/App.js":"2","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/Login.js":"3","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/student/ResultsPage.js":"4","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/student/Dashboard.js":"5","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/teacher/QuestionManager.js":"6","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/student/QuizPage.js":"7","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/teacher/Dashboard.js":"8","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/assets/logo.js":"9","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/styles/theme.js":"10"},{"size":219,"mtime":1743773720319,"results":"11","hashOfConfig":"12"},{"size":2343,"mtime":1743774312969,"results":"13","hashOfConfig":"12"},{"size":11352,"mtime":1743776220815,"results":"14","hashOfConfig":"12"},{"size":9411,"mtime":1743773195123,"results":"15","hashOfConfig":"12"},{"size":9310,"mtime":1743775466048,"results":"16","hashOfConfig":"12"},{"size":10340,"mtime":1743773126947,"results":"17","hashOfConfig":"12"},{"size":17667,"mtime":1743775592100,"results":"18","hashOfConfig":"12"},{"size":24374,"mtime":1743776646819,"results":"19","hashOfConfig":"12"},{"size":1275,"mtime":1743774132555,"results":"20","hashOfConfig":"12"},{"size":1698,"mtime":1743774246393,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1i25870",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/index.js",[],["45","46"],"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/App.js",[],"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/Login.js",[],"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/student/ResultsPage.js",["47","48"],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Container,\n  Paper,\n  Typography,\n  Box,\n  CircularProgress,\n  List,\n  ListItem,\n  ListItemText,\n  Chip,\n  Divider,\n  Grid,\n} from '@mui/material';\nimport {\n  CheckCircle,\n  Cancel,\n  TrendingUp,\n  School,\n  Timer,\n  Grade,\n} from '@mui/icons-material';\nimport { motion } from 'framer-motion';\nimport axios from 'axios';\n\nconst ResultsPage = () => {\n  const { id } = useParams();\n  const [results, setResults] = useState(null);\n  const [aiAnalysis, setAiAnalysis] = useState(null);\n\n  useEffect(() => {\n    fetchResults();\n  }, [id]);\n\n  const fetchResults = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/quiz/${id}/results`);\n      setResults(response.data.results);\n      setAiAnalysis(response.data.aiAnalysis);\n    } catch (error) {\n      console.error('Error fetching results:', error);\n    }\n  };\n\n  if (!results) {\n    return (\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '100vh',\n        }}\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        {/* Score Overview */}\n        <Paper\n          elevation={3}\n          sx={{\n            p: 3,\n            mb: 3,\n            background: 'linear-gradient(45deg, #1A237E 30%, #3949AB 90%)',\n            color: 'white',\n          }}\n        >\n          <Grid container spacing={3} alignItems=\"center\">\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"h4\" gutterBottom>\n                Quiz Results\n              </Typography>\n              <Typography variant=\"h6\">\n                Score: {results.score}%\n              </Typography>\n              <Typography variant=\"subtitle1\">\n                Time Taken: {results.timeTaken} minutes\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{\n                    type: 'spring',\n                    stiffness: 260,\n                    damping: 20,\n                  }}\n                >\n                  <CircularProgress\n                    variant=\"determinate\"\n                    value={results.score}\n                    size={120}\n                    thickness={4}\n                    sx={{\n                      color: 'white',\n                      '& .MuiCircularProgress-circle': {\n                        strokeLinecap: 'round',\n                      },\n                    }}\n                  />\n                  <Typography\n                    variant=\"h4\"\n                    component=\"div\"\n                    sx={{\n                      position: 'absolute',\n                      top: '50%',\n                      left: '50%',\n                      transform: 'translate(-50%, -50%)',\n                    }}\n                  >\n                    {results.score}%\n                  </Typography>\n                </motion.div>\n              </Box>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <Grid container spacing={3}>\n          {/* Question Review */}\n          <Grid item xs={12} md={8}>\n            <Paper elevation={3} sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Question Review\n              </Typography>\n              <List>\n                {results.questions.map((question, index) => (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <ListItem>\n                      <ListItemText\n                        primary={\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <Typography variant=\"subtitle1\">\n                              {index + 1}. {question.text}\n                            </Typography>\n                            {question.correct ? (\n                              <CheckCircle\n                                color=\"success\"\n                                sx={{ ml: 1 }}\n                              />\n                            ) : (\n                              <Cancel color=\"error\" sx={{ ml: 1 }} />\n                            )}\n                          </Box>\n                        }\n                        secondary={\n                          <Box sx={{ mt: 1 }}>\n                            <Typography\n                              component=\"span\"\n                              variant=\"body2\"\n                              color=\"text.primary\"\n                            >\n                              Your answer: {question.userAnswer}\n                            </Typography>\n                            {!question.correct && (\n                              <Typography\n                                component=\"span\"\n                                variant=\"body2\"\n                                color=\"success.main\"\n                                sx={{ display: 'block' }}\n                              >\n                                Correct answer: {question.correctAnswer}\n                              </Typography>\n                            )}\n                          </Box>\n                        }\n                      />\n                    </ListItem>\n                    {index < results.questions.length - 1 && <Divider />}\n                  </motion.div>\n                ))}\n              </List>\n            </Paper>\n          </Grid>\n\n          {/* AI Analysis */}\n          <Grid item xs={12} md={4}>\n            <Paper elevation={3} sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                AI-Powered Analysis\n              </Typography>\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Performance Metrics\n                </Typography>\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                  <Chip\n                    icon={<Timer />}\n                    label={`Avg. Time: ${aiAnalysis.avgTimePerQuestion}s`}\n                    color=\"primary\"\n                  />\n                  <Chip\n                    icon={<Grade />}\n                    label={`Accuracy: ${aiAnalysis.accuracy}%`}\n                    color=\"secondary\"\n                  />\n                  <Chip\n                    icon={<School />}\n                    label={`Difficulty: ${aiAnalysis.difficulty}`}\n                    color=\"default\"\n                  />\n                </Box>\n              </Box>\n\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Strengths\n                </Typography>\n                <List dense>\n                  {aiAnalysis.strengths.map((strength, index) => (\n                    <ListItem key={index}>\n                      <ListItemText\n                        primary={strength}\n                        primaryTypographyProps={{\n                          variant: 'body2',\n                          color: 'success.main',\n                        }}\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n\n              <Box>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Areas for Improvement\n                </Typography>\n                <List dense>\n                  {aiAnalysis.improvements.map((improvement, index) => (\n                    <ListItem key={index}>\n                      <ListItemText\n                        primary={improvement}\n                        primaryTypographyProps={{\n                          variant: 'body2',\n                          color: 'error.main',\n                        }}\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n\n              <Box sx={{ mt: 3 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Recommended Resources\n                </Typography>\n                <List dense>\n                  {aiAnalysis.recommendations.map((rec, index) => (\n                    <ListItem key={index}>\n                      <ListItemText\n                        primary={rec.title}\n                        secondary={rec.description}\n                        primaryTypographyProps={{\n                          variant: 'body2',\n                          color: 'primary.main',\n                        }}\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n            </Paper>\n          </Grid>\n        </Grid>\n      </motion.div>\n    </Container>\n  );\n};\n\nexport default ResultsPage;\n","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/student/Dashboard.js",[],"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/teacher/QuestionManager.js",["49","50","51"],"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  Paper,\n  Typography,\n  Button,\n  TextField,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Snackbar,\n  Alert,\n} from '@mui/material';\nimport { Add, Edit, Delete, Save } from '@mui/icons-material';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\n\nconst QuestionManager = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [quiz, setQuiz] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [showQuestionDialog, setShowQuestionDialog] = useState(false);\n  const [editingQuestion, setEditingQuestion] = useState(null);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n\n  // New question form state\n  const [questionText, setQuestionText] = useState('');\n  const [options, setOptions] = useState(['', '', '', '']);\n  const [correctAnswer, setCorrectAnswer] = useState('');\n\n  useEffect(() => {\n    fetchQuizData();\n  }, [id]);\n\n  const fetchQuizData = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/teacher/quizzes/${id}`);\n      setQuiz(response.data.quiz);\n      setQuestions(response.data.questions);\n    } catch (error) {\n      console.error('Error fetching quiz data:', error);\n      showSnackbar('Error loading quiz data', 'error');\n    }\n  };\n\n  const handleAddQuestion = () => {\n    setEditingQuestion(null);\n    setQuestionText('');\n    setOptions(['', '', '', '']);\n    setCorrectAnswer('');\n    setShowQuestionDialog(true);\n  };\n\n  const handleEditQuestion = (question) => {\n    setEditingQuestion(question);\n    setQuestionText(question.questionText);\n    setOptions(question.options);\n    setCorrectAnswer(question.correctAnswer);\n    setShowQuestionDialog(true);\n  };\n\n  const handleDeleteQuestion = async () => {\n    try {\n      await axios.delete(\n        `http://localhost:5000/api/teacher/questions/${selectedQuestion.id}`\n      );\n      setShowDeleteDialog(false);\n      setSelectedQuestion(null);\n      fetchQuizData();\n      showSnackbar('Question deleted successfully');\n    } catch (error) {\n      console.error('Error deleting question:', error);\n      showSnackbar('Error deleting question', 'error');\n    }\n  };\n\n  const handleSaveQuestion = async () => {\n    try {\n      const questionData = {\n        questionText,\n        options,\n        correctAnswer,\n        quizId: id,\n      };\n\n      if (editingQuestion) {\n        await axios.put(\n          `http://localhost:5000/api/teacher/questions/${editingQuestion.id}`,\n          questionData\n        );\n      } else {\n        await axios.post(\n          'http://localhost:5000/api/teacher/questions',\n          questionData\n        );\n      }\n\n      setShowQuestionDialog(false);\n      fetchQuizData();\n      showSnackbar(\n        `Question ${editingQuestion ? 'updated' : 'added'} successfully`\n      );\n    } catch (error) {\n      console.error('Error saving question:', error);\n      showSnackbar('Error saving question', 'error');\n    }\n  };\n\n  const handleOptionChange = (index, value) => {\n    const newOptions = [...options];\n    newOptions[index] = value;\n    setOptions(newOptions);\n  };\n\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbar({ open: true, message, severity });\n  };\n\n  const handleCloseSnackbar = () => {\n    setSnackbar({ ...snackbar, open: false });\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Question Manager\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Add />}\n            onClick={handleAddQuestion}\n          >\n            Add Question\n          </Button>\n        </Box>\n\n        <Paper elevation={3} sx={{ p: 2 }}>\n          <List>\n            <AnimatePresence>\n              {questions.map((question, index) => (\n                <motion.div\n                  key={question.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: 20 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <ListItem\n                    divider={index < questions.length - 1}\n                    sx={{ display: 'flex', alignItems: 'flex-start' }}\n                  >\n                    <ListItemText\n                      primary={\n                        <Typography variant=\"subtitle1\">\n                          {index + 1}. {question.questionText}\n                        </Typography>\n                      }\n                      secondary={\n                        <Box sx={{ mt: 1 }}>\n                          {question.options.map((option, i) => (\n                            <Typography\n                              key={i}\n                              variant=\"body2\"\n                              color={\n                                option === question.correctAnswer\n                                  ? 'success.main'\n                                  : 'text.secondary'\n                              }\n                            >\n                              {String.fromCharCode(65 + i)}. {option}\n                            </Typography>\n                          ))}\n                        </Box>\n                      }\n                    />\n                    <Box>\n                      <IconButton\n                        onClick={() => handleEditQuestion(question)}\n                        sx={{ mr: 1 }}\n                      >\n                        <Edit />\n                      </IconButton>\n                      <IconButton\n                        onClick={() => {\n                          setSelectedQuestion(question);\n                          setShowDeleteDialog(true);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </Box>\n                  </ListItem>\n                </motion.div>\n              ))}\n            </AnimatePresence>\n          </List>\n        </Paper>\n\n        {/* Question Dialog */}\n        <Dialog\n          open={showQuestionDialog}\n          onClose={() => setShowQuestionDialog(false)}\n          maxWidth=\"md\"\n          fullWidth\n        >\n          <DialogTitle>\n            {editingQuestion ? 'Edit Question' : 'Add New Question'}\n          </DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Question Text\"\n              fullWidth\n              multiline\n              rows={2}\n              value={questionText}\n              onChange={(e) => setQuestionText(e.target.value)}\n              sx={{ mb: 3 }}\n            />\n\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Options\n            </Typography>\n            {options.map((option, index) => (\n              <TextField\n                key={index}\n                margin=\"dense\"\n                label={`Option ${String.fromCharCode(65 + index)}`}\n                fullWidth\n                value={option}\n                onChange={(e) => handleOptionChange(index, e.target.value)}\n                sx={{ mb: 2 }}\n              />\n            ))}\n\n            <FormControl component=\"fieldset\" sx={{ mt: 2 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Correct Answer\n              </Typography>\n              <RadioGroup\n                value={correctAnswer}\n                onChange={(e) => setCorrectAnswer(e.target.value)}\n              >\n                {options.map((option, index) => (\n                  <FormControlLabel\n                    key={index}\n                    value={option}\n                    control={<Radio />}\n                    label={`Option ${String.fromCharCode(65 + index)}`}\n                    disabled={!option}\n                  />\n                ))}\n              </RadioGroup>\n            </FormControl>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setShowQuestionDialog(false)}>Cancel</Button>\n            <Button\n              onClick={handleSaveQuestion}\n              color=\"primary\"\n              startIcon={<Save />}\n              disabled={\n                !questionText ||\n                options.some((opt) => !opt) ||\n                !correctAnswer\n              }\n            >\n              Save\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <Dialog\n          open={showDeleteDialog}\n          onClose={() => setShowDeleteDialog(false)}\n        >\n          <DialogTitle>Delete Question</DialogTitle>\n          <DialogContent>\n            <Typography>\n              Are you sure you want to delete this question? This action cannot be\n              undone.\n            </Typography>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setShowDeleteDialog(false)}>Cancel</Button>\n            <Button onClick={handleDeleteQuestion} color=\"error\">\n              Delete\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/* Snackbar for notifications */}\n        <Snackbar\n          open={snackbar.open}\n          autoHideDuration={6000}\n          onClose={handleCloseSnackbar}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        >\n          <Alert\n            onClose={handleCloseSnackbar}\n            severity={snackbar.severity}\n            sx={{ width: '100%' }}\n          >\n            {snackbar.message}\n          </Alert>\n        </Snackbar>\n      </motion.div>\n    </Container>\n  );\n};\n\nexport default QuestionManager;\n","/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/student/QuizPage.js",["52","53","54","55","56","57","58","59","60","61"],"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/components/teacher/Dashboard.js",[],"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/assets/logo.js",[],"/Users/bhargavdeviprasads/Desktop/untitled folder/frontend/src/styles/theme.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":19,"column":3,"nodeType":"68","messageId":"69","endLine":19,"endColumn":13},{"ruleId":"70","severity":1,"message":"71","line":34,"column":6,"nodeType":"72","endLine":34,"endColumn":10,"suggestions":"73"},{"ruleId":"66","severity":1,"message":"74","line":31,"column":9,"nodeType":"68","messageId":"69","endLine":31,"endColumn":17},{"ruleId":"66","severity":1,"message":"75","line":32,"column":10,"nodeType":"68","messageId":"69","endLine":32,"endColumn":14},{"ruleId":"70","severity":1,"message":"76","line":47,"column":6,"nodeType":"72","endLine":47,"endColumn":10,"suggestions":"77"},{"ruleId":"66","severity":1,"message":"78","line":46,"column":10,"nodeType":"68","messageId":"69","endLine":46,"endColumn":22},{"ruleId":"66","severity":1,"message":"79","line":49,"column":10,"nodeType":"68","messageId":"69","endLine":49,"endColumn":21},{"ruleId":"66","severity":1,"message":"80","line":50,"column":10,"nodeType":"68","messageId":"69","endLine":50,"endColumn":23},{"ruleId":"66","severity":1,"message":"81","line":51,"column":10,"nodeType":"68","messageId":"69","endLine":51,"endColumn":25},{"ruleId":"70","severity":1,"message":"82","line":85,"column":6,"nodeType":"72","endLine":85,"endColumn":16,"suggestions":"83"},{"ruleId":"70","severity":1,"message":"84","line":100,"column":6,"nodeType":"72","endLine":100,"endColumn":8,"suggestions":"85"},{"ruleId":"70","severity":1,"message":"84","line":117,"column":6,"nodeType":"72","endLine":117,"endColumn":8,"suggestions":"86"},{"ruleId":"70","severity":1,"message":"84","line":146,"column":6,"nodeType":"72","endLine":146,"endColumn":8,"suggestions":"87"},{"ruleId":"70","severity":1,"message":"88","line":172,"column":6,"nodeType":"72","endLine":172,"endColumn":8,"suggestions":"89"},{"ruleId":"66","severity":1,"message":"90","line":208,"column":13,"nodeType":"68","messageId":"69","endLine":208,"endColumn":21},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'TrendingUp' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchResults'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'navigate' is assigned a value but never used.","'quiz' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchQuizData'. Either include it or remove the dependency array.",["94"],"'warningCount' is assigned a value but never used.","'isTabActive' is assigned a value but never used.","'mouseOutCount' is assigned a value but never used.","'keyPressPattern' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleSubmit'. Either include it or remove the dependency array.",["95"],"React Hook useEffect has a missing dependency: 'logProctorEvent'. Either include it or remove the dependency array.",["96"],["97"],["98"],"React Hook useEffect has a missing dependency: 'captureFrame'. Either include it or remove the dependency array.",["99"],"'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"106","fix":"108"},{"desc":"106","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [fetchResults, id]",{"range":"112","text":"113"},"Update the dependencies array to be: [fetchQuizData, id]",{"range":"114","text":"115"},"Update the dependencies array to be: [handleSubmit, timeLeft]",{"range":"116","text":"117"},"Update the dependencies array to be: [logProctorEvent]",{"range":"118","text":"119"},{"range":"120","text":"119"},{"range":"121","text":"119"},"Update the dependencies array to be: [captureFrame]",{"range":"122","text":"123"},[637,641],"[fetchResults, id]",[1348,1352],"[fetchQuizData, id]",[2163,2173],"[handleSubmit, timeLeft]",[2640,2642],"[logProctorEvent]",[3141,3143],[4087,4089],[4890,4892],"[captureFrame]"]